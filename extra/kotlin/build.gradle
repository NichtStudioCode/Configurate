import io.gitlab.arturbosch.detekt.Detekt
import org.jetbrains.dokka.gradle.DokkaTask

plugins {
    alias(libs.plugins.kotlin)
    alias(libs.plugins.dokka)
    alias(libs.plugins.detekt)
    id 'org.spongepowered.configurate.build.component'
}

description = "Kotlin API support for Configurate"

sourceSets {
    register('examples') {
        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
}

dependencies {
    examplesImplementation sourceSets.named('main').map { it.output }
    examplesImplementation projects.format.yaml
}

kotlin {
    coreLibrariesVersion = "1.8.20"
    target {
        compilations.configureEach {
            kotlinOptions {
                jvmTarget = "1.8"
                languageVersion = "1.8"
                freeCompilerArgs += ["-opt-in=kotlin.RequiresOptIn", "-Xemit-jvm-type-annotations"]
            }
        }
    }
}

javadocJar.configure {
    from(tasks.named('dokkaJavadoc').map { it.outputs })
}

tasks.withType(DokkaTask).configureEach {
    moduleName.set("configurate-${project.name}")
    dokkaSourceSets.configureEach {
        includes.from(file("src/main/packages.md"))
        samples.from(kotlin.sourceSets.named("examples").map {
            it.kotlin.sourceDirectories
        })
        jdkVersion.set(8)
        reportUndocumented.set(true)
    }
}

tasks.withType(Detekt).configureEach {
    config.setFrom(rootProject.file(".detekt/detekt.yml"))
}

dependencies {
    api projects.core
    implementation libs.kotlin.reflect
    // This version has to be kept in sync with the Kotlin plugin version
    implementation libs.kotlin.coroutines
}
