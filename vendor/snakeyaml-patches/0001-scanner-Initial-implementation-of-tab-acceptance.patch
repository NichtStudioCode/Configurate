From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: zml <zml@stellardrift.ca>
Date: Fri, 19 Mar 2021 22:51:12 -0700
Subject: [PATCH] scanner: Initial implementation of tab acceptance


diff --git a/src/main/java/org/yaml/snakeyaml/LoaderOptions.java b/src/main/java/org/yaml/snakeyaml/LoaderOptions.java
index 12038cbbab7d0263739b8738a309412157be71c5..772c8819aab4b39d702d89d0508dc79d2126c13f 100644
--- a/src/main/java/org/yaml/snakeyaml/LoaderOptions.java
+++ b/src/main/java/org/yaml/snakeyaml/LoaderOptions.java
@@ -32,6 +32,8 @@ public class LoaderOptions {
 
   private boolean processComments = false;
 
+  private boolean acceptTabs = false;
+
   private boolean enumCaseSensitive = true;
 
   private int nestingDepthLimit = 50;
@@ -149,6 +151,30 @@ public class LoaderOptions {
     return this;
   }
 
+  /**
+   * Set the scanner to accept tabs.
+   *
+   * <p>
+   * This mode is disabled by default, since tabs are not valid in a YAML document. However, when
+   * working with user-generated input it can be beneficial to attempt to process tabs.
+   * </p>
+   *
+   * <p>
+   * When tabs are accepted, each tab is treated as <em>one space.</em>
+   * </p>
+   *
+   * @param acceptTabs whether tabs should be accepted
+   * @return this
+   */
+  public LoaderOptions setAcceptTabs(final boolean acceptTabs) {
+    this.acceptTabs = acceptTabs;
+    return this;
+  }
+
+  public boolean isAcceptTabs() {
+    return this.acceptTabs;
+  }
+
   /**
    * getter
    *
diff --git a/src/main/java/org/yaml/snakeyaml/scanner/ScannerImpl.java b/src/main/java/org/yaml/snakeyaml/scanner/ScannerImpl.java
index ca2343c2d223abee59c219aa58629efd46429fdf..e566816b2cf7719a14c601f2551aa7f6f0c13cd6 100644
--- a/src/main/java/org/yaml/snakeyaml/scanner/ScannerImpl.java
+++ b/src/main/java/org/yaml/snakeyaml/scanner/ScannerImpl.java
@@ -216,11 +216,14 @@ public final class ScannerImpl implements Scanner {
    */
   private final Map<Integer, SimpleKey> possibleSimpleKeys;
 
+  private final boolean acceptTabs;
+
   public ScannerImpl(StreamReader reader, LoaderOptions options) {
     if (options == null) {
       throw new NullPointerException("LoaderOptions must be provided.");
     }
     this.parseComments = options.isProcessComments();
+    this.acceptTabs = options.isAcceptTabs();
     this.reader = reader;
     this.tokens = new ArrayList<Token>(100);
     this.indents = new ArrayStack<Integer>(10);
@@ -1213,7 +1216,7 @@ public final class ScannerImpl implements Scanner {
       int ff = 0;
       // Peek ahead until we find the first non-space character, then
       // move forward directly to that character.
-      while (reader.peek(ff) == ' ') {
+      while (reader.peek(ff) == ' ' || (this.acceptTabs && this.reader.peek(ff) == '\t')) { // Configurate
         ff++;
       }
       if (ff > 0) {
diff --git a/src/test/java/org/yaml/snakeyaml/scanner/ScannerImplTest.java b/src/test/java/org/yaml/snakeyaml/scanner/ScannerImplTest.java
index 68b73d5747a4277a988fa0d4421cfcfd897086f8..b1418eff4ea526dbcc4047d87804599e1dc2f0ba 100644
--- a/src/test/java/org/yaml/snakeyaml/scanner/ScannerImplTest.java
+++ b/src/test/java/org/yaml/snakeyaml/scanner/ScannerImplTest.java
@@ -63,4 +63,17 @@ public class ScannerImplTest extends TestCase {
           + " in 'string', line 1, column 1:\n" + "    \t  data: 1\n" + "    ^\n", e.getMessage());
     }
   }
+
+  public void testTabsAllowed() {
+    // TODO: Test mixed tabs and spaces once those are properly handled
+    final Scanner scanner =
+        new ScannerImpl(new StreamReader("\tdata: 1"), new LoaderOptions().setAcceptTabs(true));
+    final Token.ID[] expectedTokens = {Token.ID.StreamStart, Token.ID.BlockMappingStart,
+        Token.ID.Key, Token.ID.Scalar, Token.ID.Value, Token.ID.Scalar, Token.ID.BlockEnd,};
+
+    int expected = 0;
+    do {
+      assertEquals(expectedTokens[expected++], scanner.getToken().getTokenId());
+    } while (!scanner.checkToken(Token.ID.StreamEnd));
+  }
 }
